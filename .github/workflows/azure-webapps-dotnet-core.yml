# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow: 
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

# My notes : in step 'Build with dotnet' we are going to restore the solution too 

name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: Ecommercewindows    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: .\published      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '7.0.x'                 # set this to the .NET Core version to use
  WORKING_DIRECTORY: Ecommerce

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v3
      with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore
      run: dotnet restore ./Ecommerce.sln

    - name: Install EF Tool
      run: |
            dotnet new tool-manifest
            dotnet tool install dotnet-ef

    - name: Build with dotnet
      run: dotnet build ./Ecommerce.sln --configuration Release --no-restore
      
    - name: Generate scripts
      #run: dotnet ef migrations script --idempotent --output  ${{env.AZURE_WEBAPP_PACKAGE_PATH}}/sql/sql-script.sql
      run: |
           cd Ecommerce
           dir
           dotnet ef migrations script --output ${{env.WORKING_DIRECTORY}}\sql-script.sql --idempotent --context DataContext --configuration Release --no-build
    - name: listfiles
      run: dir ${{env.WORKING_DIRECTORY}}\Ecommerce

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}

    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        # Name of the Azure SQL Server name, like Fabrikam.database.windows.net.
        server-name: ecommercewindows-server.database.windows.net
        # The connection string, including authentication information, for the Azure SQL Server database.
        connection-string: ${{ secrets.CONNECTION_STRING }}
        # Path to SQL script file to deploy
        sql-file: ${{env.WORKING_DIRECTORY}}\Ecommerce\sql-script.sql

    - name: dotnet publish
      run: dotnet publish ./Ecommerce.sln -c Release -o ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
      id: publish_output

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
          name: .net-app
          path: ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
